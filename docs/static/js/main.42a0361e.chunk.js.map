{"version":3,"sources":["index.js"],"names":["Square","props","react__WEBPACK_IMPORTED_MODULE_6___default","a","createElement","className","onClick","value","Board","squares","Game","_this","Object","_Users_jangalinski_IdeaProjects_jangalinski_react_tic_tac_toe_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_1__","this","_Users_jangalinski_IdeaProjects_jangalinski_react_tic_tac_toe_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_3__","_Users_jangalinski_IdeaProjects_jangalinski_react_tic_tac_toe_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4__","call","state","history","Array","fill","stepNumber","xIsNext","i","slice","length","calculateWinner","nextPlayer","setState","concat","step","status","_this2","current","winner","moves","map","move","desc","key","jumpTo","handleClick","React","Component","lines","_lines$i","_Users_jangalinski_IdeaProjects_jangalinski_react_tic_tac_toe_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_0__","b","c","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.42a0361e.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nfunction Square(props) { return (\n    <button className=\"square\" onClick={props.onClick}>\n        {props.value}\n    </button>\n)}\n\n  \nfunction Board(props) { return (\n    <div>\n        <div className=\"board-row\">\n        <Square \n            value={ props.squares[0] }\n            onClick={() => props.onClick(0)}\n        />\n        <Square \n            value={ props.squares[1] }\n            onClick={() => props.onClick(1)}\n        />\n        <Square \n            value={ props.squares[2] }\n            onClick={() => props.onClick(2)}\n        />\n        </div>\n        <div className=\"board-row\">\n        <Square \n            value={ props.squares[3] }\n            onClick={() => props.onClick(3)}\n        />\n        <Square \n            value={ props.squares[4] }\n            onClick={() => props.onClick(4)}\n        />\n        <Square \n            value={ props.squares[5] }\n            onClick={() => props.onClick(5)}\n        />\n        </div>\n        <div className=\"board-row\">\n        <Square \n            value={ props.squares[6] }\n            onClick={() => props.onClick(6)}\n        />\n        <Square \n            value={ props.squares[7] }\n            onClick={() => props.onClick(7)}\n        />\n        <Square \n            value={ props.squares[8] }\n            onClick={() => props.onClick(8)}\n        />\n        </div>\n    </div>\n)}\n  \nclass Game extends React.Component {\n    constructor(props) {\n        super(props)\n\n        this.state={\n            history: [{\n                squares: Array(9).fill(null),\n            }],\n            stepNumber: 0,\n            xIsNext: true,\n        }\n    }\n\n    nextPlayer() { return this.state.xIsNext ? 'X' : 'O' }\n\n    handleClick(i) {\n        const history = this.state.history.slice(0, this.state.stepNumber + 1)\n        const current = history[history.length - 1]\n        const squares = current.squares.slice();\n\n        if (calculateWinner(squares) || squares[i]) {\n            return;\n        }\n        squares[i] = this.nextPlayer();\n\n        this.setState({\n            history: history.concat([{\n                squares: squares,\n            }]),\n            stepNumber: history.length,\n            xIsNext: !this.state.xIsNext,\n        });\n    }\n\n    jumpTo(step) {\n        this.setState({\n            stepNumber: step,\n            xIsNext: (step % 2) === 0,\n        })\n    }\n\n    render() {\n        const history = this.state.history\n        const current = history[this.state.stepNumber]\n        const winner = calculateWinner(current.squares)\n\n        const moves = history.map((step, move) => {\n            const desc = move \n                ? 'Go to move #' + move\n                : 'Go to game start'\n            return (\n                <li key={move}>\n                    <button onClick={() => this.jumpTo(move)}>{desc}</button>\n                </li>\n            )\n        })\n\n        let status;\n        if (winner === 'Draw') {\n            status = winner\n        }\n        else if (winner) {\n            status = 'Winner: ' + winner;\n        } else {\n            status = 'Next player: ' + this.nextPlayer();\n        }\n        return (\n            <div className=\"game\">\n                <div className=\"game-board\">\n                    <Board \n                        squares={current.squares}\n                        onClick={(i) => this.handleClick(i) }\n                    />\n                </div>\n                <div className=\"game-info\">\n                    <div>{status}</div>\n                    <ol>{moves}</ol>\n                </div>\n            </div>\n        )\n    }\n}\n  \n  // ========================================\n  \n  ReactDOM.render(\n    <Game />,\n    document.getElementById('root')\n  );\n\n  function calculateWinner(squares) {\n    const lines = [\n      [0, 1, 2],\n      [3, 4, 5],\n      [6, 7, 8],\n      [0, 3, 6],\n      [1, 4, 7],\n      [2, 5, 8],\n      [0, 4, 8],\n      [2, 4, 6],\n    ];\n    // if a player owns row, column or diagonal, he has won\n    for (let i = 0; i < lines.length; i++) {\n      const [a, b, c] = lines[i];\n      if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n        return squares[a];\n      }\n    }\n    // if no one won and at least one square is empty: no winner\n    for (let i=0; i<9; i++) {\n        if (!squares[i]) {\n            return null;\n        }\n    }\n    // on one won and board full: draw\n    return 'Draw';\n  }"],"sourceRoot":""}